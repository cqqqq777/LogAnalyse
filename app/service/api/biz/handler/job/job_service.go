// Code generated by hertz generator.

package job

import (
	"context"

	"LogAnalyse/app/service/api/biz/model/job"
	"LogAnalyse/app/service/api/config"
	lconsts "LogAnalyse/app/shared/consts"
	"LogAnalyse/app/shared/errz"
	"LogAnalyse/app/shared/kitex_gen/common"
	kjob "LogAnalyse/app/shared/kitex_gen/job"
	"LogAnalyse/app/shared/log"
	"LogAnalyse/app/shared/response"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateJob .
// @router /api/job [POST]
func CreateJob(ctx context.Context, c *app.RequestContext) {
	var err error
	var req job.CreateJobReq
	resp := new(common.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp = response.NewBaseResp(errz.ErrInvalidParam)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	userID, ok := c.Get(lconsts.AccountID)
	if !ok {
		resp = response.NewBaseResp(errz.ErrGetUserId)
		c.JSON(consts.StatusOK, resp)
		return
	}

	res, err := config.GlobalJobClient.CreateJob(ctx, &kjob.CreateJobReq{
		JobName:  req.JobName,
		UserId:   userID.(int64),
		FileName: req.FileName,
		Field:    req.Field,
	})
	if err != nil {
		log.Zlogger.Error("rpc call job service failed err:" + err.Error())
		resp = response.NewBaseResp(errz.ErrRpcCall)
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, res)
}

// ListJob .
// @router /api/jobs [GET]
func ListJob(ctx context.Context, c *app.RequestContext) {
	var err error
	var req job.ListJobReq
	resp := new(common.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp = response.NewBaseResp(errz.ErrInvalidParam)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	userID, ok := c.Get(lconsts.AccountID)
	if !ok {
		resp = response.NewBaseResp(errz.ErrGetUserId)
		c.JSON(consts.StatusOK, resp)
		return
	}

	res, err := config.GlobalJobClient.ListJob(ctx, &kjob.ListJobReq{UserId: userID.(int64)})
	if err != nil {
		log.Zlogger.Error("rpc call job service failed err:" + err.Error())
		resp = response.NewBaseResp(errz.ErrRpcCall)
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, res)
}

// GetJobInfo .
// @router /api/file [GET]
func GetJobInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req job.GetJobInfoReq
	resp := new(common.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp = response.NewBaseResp(errz.ErrInvalidParam)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	userID, ok := c.Get(lconsts.AccountID)
	if !ok {
		resp = response.NewBaseResp(errz.ErrGetUserId)
		c.JSON(consts.StatusOK, resp)
		return
	}

	res, err := config.GlobalJobClient.GetJobInfo(ctx, &kjob.GetJobInfoReq{UserId: userID.(int64), JobId: req.JobID})
	if err != nil {
		log.Zlogger.Error("rpc call job service failed err:" + err.Error())
		resp = response.NewBaseResp(errz.ErrRpcCall)
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, res)
}
