// Code generated by hertz generator.

package file

import (
	"LogAnalyse/app/shared/log"
	"context"

	"LogAnalyse/app/service/api/biz/model/file"
	"LogAnalyse/app/service/api/config"
	lconsts "LogAnalyse/app/shared/consts"
	"LogAnalyse/app/shared/errz"
	"LogAnalyse/app/shared/kitex_gen/common"
	kfile "LogAnalyse/app/shared/kitex_gen/file"
	"LogAnalyse/app/shared/response"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UploadFile .
// @router /api/file [POST]
func UploadFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.UploadFileReq
	resp := new(common.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp = response.NewBaseResp(errz.ErrInvalidParam)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	userID, ok := c.Get(lconsts.AccountID)
	if !ok {
		resp = response.NewBaseResp(errz.ErrGetUserId)
		c.JSON(consts.StatusOK, resp)
		return
	}

	res, err := config.GlobalFileClient.UploadFile(ctx, &kfile.UploadFileReq{Id: userID.(int64)})
	if err != nil {
		log.Zlogger.Error("rpc call file service failed err:" + err.Error())
		resp = response.NewBaseResp(errz.ErrRpcCall)
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, res)
}

// DownloadFile .
// @router /api/file [GET]
func DownloadFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.DownloadFileReq
	resp := new(common.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp = response.NewBaseResp(errz.ErrInvalidParam)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	userID, ok := c.Get(lconsts.AccountID)
	if !ok {
		resp = response.NewBaseResp(errz.ErrGetUserId)
		c.JSON(consts.StatusOK, resp)
		return
	}
	res, err := config.GlobalFileClient.DownloadFile(ctx, &kfile.DownloadFileReq{Id: userID.(int64), FileName: req.FileName})
	if err != nil {
		log.Zlogger.Error("rpc call file service failed err:" + err.Error())
		resp = response.NewBaseResp(errz.ErrRpcCall)
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, res)
}

// ListFile .
// @router /api/files [GET]
func ListFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req file.ListFileReq
	resp := new(common.BaseResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp = response.NewBaseResp(errz.ErrInvalidParam)
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	userID, ok := c.Get(lconsts.AccountID)
	if !ok {
		resp = response.NewBaseResp(errz.ErrGetUserId)
		c.JSON(consts.StatusOK, resp)
		return
	}

	res, err := config.GlobalFileClient.ListFile(ctx, &kfile.ListFileReq{Id: userID.(int64)})
	if err != nil {
		log.Zlogger.Error("rpc call file service failed err:" + err.Error())
		resp = response.NewBaseResp(errz.ErrRpcCall)
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, res)
}
