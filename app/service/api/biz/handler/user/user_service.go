// Code generated by hertz generator.

package user

import (
	"LogAnalyse/app/service/api/config"
	"LogAnalyse/app/shared/errz"
	kuser "LogAnalyse/app/shared/kitex_gen/user"
	"LogAnalyse/app/shared/log"
	"LogAnalyse/app/shared/response"
	"context"

	user "LogAnalyse/app/service/api/biz/model/user"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /api/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterReq
	resp := new(kuser.RegisterResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		resp.BaseResp = response.NewBaseResp(errz.ErrInvalidParam)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	res, err := config.GlobalUserClient.Register(ctx, &kuser.RegisterReq{Username: req.Username, Password: req.Password})
	if err != nil {
		log.Zlogger.Warn("rpc user service failed err:" + err.Error())
		resp.BaseResp = response.NewBaseResp(errz.ErrUserService)
		c.JSON(consts.StatusInternalServerError, resp)
	}

	c.JSON(consts.StatusOK, res)
}

// Login .
// @router /api/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginReq
	err = c.BindAndValidate(&req)
	resp := new(kuser.LoginResp)
	if err != nil {
		resp.BaseResp = response.NewBaseResp(errz.ErrInvalidParam)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	res, err := config.GlobalUserClient.Login(ctx, &kuser.LoginReq{Username: req.Username, Password: req.Password})
	if err != nil {
		log.Zlogger.Warn("rpc user service failed err:" + err.Error())
		resp.BaseResp = response.NewBaseResp(errz.ErrUserService)
		c.JSON(consts.StatusInternalServerError, resp)
	}

	c.JSON(consts.StatusOK, res)
}
