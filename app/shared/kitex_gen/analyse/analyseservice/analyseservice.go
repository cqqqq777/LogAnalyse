// Code generated by Kitex v0.5.1. DO NOT EDIT.

package analyseservice

import (
	analyse "LogAnalyse/app/shared/kitex_gen/analyse"
	common "LogAnalyse/app/shared/kitex_gen/common"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return analyseServiceServiceInfo
}

var analyseServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AnalyseService"
	handlerType := (*analyse.AnalyseService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Analyse": kitex.NewMethodInfo(analyseHandler, newAnalyseServiceAnalyseArgs, newAnalyseServiceAnalyseResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "analyse",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func analyseHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*analyse.AnalyseServiceAnalyseArgs)
	realResult := result.(*analyse.AnalyseServiceAnalyseResult)
	success, err := handler.(analyse.AnalyseService).Analyse(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAnalyseServiceAnalyseArgs() interface{} {
	return analyse.NewAnalyseServiceAnalyseArgs()
}

func newAnalyseServiceAnalyseResult() interface{} {
	return analyse.NewAnalyseServiceAnalyseResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Analyse(ctx context.Context, req *analyse.AnalyseReq) (r *common.NilResp, err error) {
	var _args analyse.AnalyseServiceAnalyseArgs
	_args.Req = req
	var _result analyse.AnalyseServiceAnalyseResult
	if err = p.c.Call(ctx, "Analyse", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
