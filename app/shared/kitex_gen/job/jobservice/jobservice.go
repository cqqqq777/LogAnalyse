// Code generated by Kitex v0.5.1. DO NOT EDIT.

package jobservice

import (
	job "LogAnalyse/app/shared/kitex_gen/job"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return jobServiceServiceInfo
}

var jobServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "JobService"
	handlerType := (*job.JobService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateJob":  kitex.NewMethodInfo(createJobHandler, newJobServiceCreateJobArgs, newJobServiceCreateJobResult, false),
		"ListJob":    kitex.NewMethodInfo(listJobHandler, newJobServiceListJobArgs, newJobServiceListJobResult, false),
		"GetJobInfo": kitex.NewMethodInfo(getJobInfoHandler, newJobServiceGetJobInfoArgs, newJobServiceGetJobInfoResult, false),
		"UpdateJob":  kitex.NewMethodInfo(updateJobHandler, newJobServiceUpdateJobArgs, newJobServiceUpdateJobResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "job",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.1",
		Extra:           extra,
	}
	return svcInfo
}

func createJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*job.JobServiceCreateJobArgs)
	realResult := result.(*job.JobServiceCreateJobResult)
	success, err := handler.(job.JobService).CreateJob(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newJobServiceCreateJobArgs() interface{} {
	return job.NewJobServiceCreateJobArgs()
}

func newJobServiceCreateJobResult() interface{} {
	return job.NewJobServiceCreateJobResult()
}

func listJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*job.JobServiceListJobArgs)
	realResult := result.(*job.JobServiceListJobResult)
	success, err := handler.(job.JobService).ListJob(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newJobServiceListJobArgs() interface{} {
	return job.NewJobServiceListJobArgs()
}

func newJobServiceListJobResult() interface{} {
	return job.NewJobServiceListJobResult()
}

func getJobInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*job.JobServiceGetJobInfoArgs)
	realResult := result.(*job.JobServiceGetJobInfoResult)
	success, err := handler.(job.JobService).GetJobInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newJobServiceGetJobInfoArgs() interface{} {
	return job.NewJobServiceGetJobInfoArgs()
}

func newJobServiceGetJobInfoResult() interface{} {
	return job.NewJobServiceGetJobInfoResult()
}

func updateJobHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*job.JobServiceUpdateJobArgs)
	realResult := result.(*job.JobServiceUpdateJobResult)
	success, err := handler.(job.JobService).UpdateJob(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newJobServiceUpdateJobArgs() interface{} {
	return job.NewJobServiceUpdateJobArgs()
}

func newJobServiceUpdateJobResult() interface{} {
	return job.NewJobServiceUpdateJobResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateJob(ctx context.Context, req *job.CreateJobReq) (r *job.CreateJobResp, err error) {
	var _args job.JobServiceCreateJobArgs
	_args.Req = req
	var _result job.JobServiceCreateJobResult
	if err = p.c.Call(ctx, "CreateJob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListJob(ctx context.Context, req *job.ListJobReq) (r *job.ListJobResp, err error) {
	var _args job.JobServiceListJobArgs
	_args.Req = req
	var _result job.JobServiceListJobResult
	if err = p.c.Call(ctx, "ListJob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetJobInfo(ctx context.Context, req *job.GetJobInfoReq) (r *job.GetJobInfoResp, err error) {
	var _args job.JobServiceGetJobInfoArgs
	_args.Req = req
	var _result job.JobServiceGetJobInfoResult
	if err = p.c.Call(ctx, "GetJobInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateJob(ctx context.Context, req *job.UpdateJobStatusReq) (r *job.UpdateJobStatusResp, err error) {
	var _args job.JobServiceUpdateJobArgs
	_args.Req = req
	var _result job.JobServiceUpdateJobResult
	if err = p.c.Call(ctx, "UpdateJob", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
